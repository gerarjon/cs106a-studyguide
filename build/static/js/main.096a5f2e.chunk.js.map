{"version":3,"sources":["pages/Lectures.js","pages/Assignments.js","components/Navbar/index.js","App.js","registerServiceWorker.js","index.js"],"names":["Lectures","className","classname","data","map","result","key","id","title","video","url","allowfullscreen","allow","src","width","height","frameborder","style","Component","Assignments","Navbar","role","aria-label","to","process","App","exact","path","component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","catch","error","ReactDOM","render","document","getElementById","URL","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"+sKA4CeA,E,uKAvCX,OACE,8BACE,6BAASC,UAAU,WACjB,yBAAKA,UAAU,aACb,wBAAIA,UAAU,SAAd,YACA,+BAGJ,6BAASC,UAAU,WAChBC,EAAKC,KAAI,SAAAC,GACR,OACE,yBAAKJ,UAAU,6BAA6BK,IAAKD,EAAOE,IACtD,wBAAIN,UAAU,cAAcI,EAAOG,OACnC,6BAASP,UAAU,SACjB,yBAAKA,UAAU,iBACb,yBAAKA,UAAU,wBAEXI,EAAOI,MAAML,KAAI,SAAAM,GACf,OACE,yBAAKT,UAAU,eACb,4BAAQA,UAAU,eAAeU,gBAAgB,IAAIC,MAAM,0EAA0EJ,MAAM,uBAAuBK,IAAKH,EAAKI,MAAM,MAAMC,OAAO,MAAMC,YAAY,kBAavO,yBAAKC,MAAO,CAACF,OAAQ,gB,GAnCNG,aCWRC,E,uKAVX,OACE,8BACE,yBAAKlB,UAAU,aAAf,a,GAJkBiB,aC0BXE,G,MAxBA,WACb,OACE,yBAAKnB,UAAU,8BAA8BoB,KAAK,aAAaC,aAAW,mBACxE,yBAAKrB,UAAU,aAEb,yBAAKA,UAAU,gBACb,kBAAC,IAAD,CAAMA,UAAU,cAAcsB,GAAIC,uBAAlC,uBAKF,yBAAKvB,UAAU,yBACb,kBAAC,IAAD,CAAMA,UAAU,cAAcsB,GAAIC,uBAAlC,YAGA,kBAAC,IAAD,CAAMvB,UAAU,cAAcsB,GAAIC,kCAAlC,oBCWKC,G,mLAhBX,OACE,oCACE,kBAAC,IAAD,KACE,kBAAC,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAMH,sBAA8BI,UAAW5B,IAE5D,kBAAC,IAAD,CAAO0B,OAAK,EAACC,KAAMH,iCAAyCI,UAAWT,W,GATjED,cCFZW,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DA6BN,SAASC,EAAgBC,GACvBC,UAAUC,cACPC,SAASH,GACTI,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,WAK1BC,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,4CAMrBC,OAAM,SAAAC,GACLH,QAAQG,MAAM,4CAA6CA,MChEjEC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDclC,WACb,GAA6C,kBAAmBlB,UAAW,CAGzE,GADkB,IAAImB,IAAIhC,qBAAwBO,OAAOC,UAC3CyB,SAAW1B,OAAOC,SAASyB,OAIvC,OAGF1B,OAAO2B,iBAAiB,QAAQ,WAC9B,IAAMtB,EAAK,UAAMZ,qBAAN,sBAENK,EAwCX,SAAiCO,GAE/BuB,MAAMvB,GACHI,MAAK,SAAAoB,GAGkB,MAApBA,EAASC,SACuD,IAAhED,EAASE,QAAQC,IAAI,gBAAgBC,QAAQ,cAG7C3B,UAAUC,cAAc2B,MAAMzB,MAAK,SAAAC,GACjCA,EAAayB,aAAa1B,MAAK,WAC7BT,OAAOC,SAASmC,eAKpBhC,EAAgBC,MAGnBc,OAAM,WACLF,QAAQC,IACN,oEAzDAmB,CAAwBhC,GAHxBD,EAAgBC,OC7BxBiC,K","file":"static/js/main.096a5f2e.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport data from '../data/data';\n\nclass Lectures extends Component {\n  render() {\n    return (\n      <main>\n        <section className=\"section\">\n          <div className=\"container\">\n            <h1 className=\"title\">Lectures</h1>\n            <hr></hr>\n          </div>\n        </section>\n        <section classname=\"section\">\n          {data.map(result => {\n            return (\n              <div className=\"container lectureContainer\" key={result.id}>\n                <h3 className=\"title is-4\">{result.title}</h3>\n                <article className=\"media\">\n                  <div className=\"media-content\">\n                    <div className=\"columns is-multiline\">\n                      {\n                        result.video.map(url => {\n                          return (\n                            <div className=\"column is-4\">\n                              <iframe className=\"lectureVideo\" allowfullscreen=\"1\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" title=\"YouTube video player\" src={url} width=\"640\" height=\"360\" frameborder=\"0\">\n                              </iframe>\n                            </div>\n                          )\n                        })\n                      }\n                    </div>\n                  </div>\n                </article>\n              </div>\n            )\n          })}\n        </section>\n        <div style={{height: \"200px\"}}></div>\n      </main>\n    )\n  }\n}\n\nexport default Lectures;","import React, { Component } from 'react';\n\nclass Assignments extends Component {\n  render() {\n    return(\n      <main>\n        <div className=\"container\">\n          allo\n        </div>\n      </main>\n    )\n  }\n}\n\nexport default Assignments;","import React from \"react\";\nimport { Link } from 'react-router-dom';\nimport './style.css';\n\nconst Navbar = () => {\n  return(\n    <nav className=\"navbar has-shadow is-spaced\" role=\"navigation\" aria-label=\"main-navigation\">\n      <div className=\"container\">\n        {/* Brand */}\n        <div className=\"navbar-brand\">\n          <Link className=\"navbar-item\" to={process.env.PUBLIC_URL + '/'}>\n            Just a Study Guide\n          </Link>\n        </div>\n        {/* Menu */}\n        <div className=\"navbar-menu is-active\">\n          <Link className=\"navbar-item\" to={process.env.PUBLIC_URL + '/'}>\n            Lectures\n          </Link>\n          <Link className=\"navbar-item\" to={process.env.PUBLIC_URL + '/assignments'}>\n            Assignments\n          </Link>\n        </div>\n      </div>\n    </nav>\n  )\n}\n\nexport default Navbar;","import React, { Component } from \"react\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n} from \"react-router-dom\";\nimport Lectures from './pages/Lectures';\nimport Assignments from './pages/Assignments';\nimport Navbar from './components/Navbar';\nimport 'bulma/css/bulma.css'\nimport \"./App.css\";\n\nclass App extends Component {\n  render() {\n    return (\n      <>\n        <Router>\n          <Navbar />\n          <Switch>\n            <Route exact path={process.env.PUBLIC_URL + '/'} component={Lectures}>\n            </Route>\n            <Route exact path={process.env.PUBLIC_URL + '/assignments'} component={Assignments}>\n            </Route>\n          </Switch>\n        </Router>\n      </>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (!isLocalhost) {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      } else {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log(\"New content is available; please refresh.\");\n            } else {\n              // At this point, everything has been pre-cached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get(\"content-type\").indexOf(\"javascript\") === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport registerServiceWorker from \"./registerServiceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\nregisterServiceWorker();\n"],"sourceRoot":""}